

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "NWCSampleManager\App.config"
//     Connection String Name: "SampleTravellers"
//     Connection String:      "Data Source=(localdb)\mssqllocaldb;Initial Catalog=SampleTravellers;Integrated Security=True;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.Infrastructure.Interception;

namespace NWCSampleManager
{
    using System.Linq;
    using System.Collections.Generic;
    using System;
    using System.Data.Entity.Core.Metadata.Edm;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.SqlClient;

    #region Unit of work

    public interface ISampleTravellersContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Question> Questions { get; set; } // Questions
        System.Data.Entity.DbSet<Response> Responses { get; set; } // Responses
        System.Data.Entity.DbSet<ResponseRepository> ResponseRepositories { get; set; } // ResponseRepository
        System.Data.Entity.DbSet<TeamAffiliation> TeamAffiliations { get; set; } // TeamAffiliations
        System.Data.Entity.DbSet<Traveller> Travellers { get; set; } // Travellers
        System.Data.Entity.DbSet<User> Users { get; set; } // Users

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class SampleTravellersContext : System.Data.Entity.DbContext, ISampleTravellersContext
    {
        public System.Data.Entity.DbSet<Question> Questions { get; set; } // Questions
        public System.Data.Entity.DbSet<Response> Responses { get; set; } // Responses
        public System.Data.Entity.DbSet<ResponseRepository> ResponseRepositories { get; set; } // ResponseRepository
        public System.Data.Entity.DbSet<TeamAffiliation> TeamAffiliations { get; set; } // TeamAffiliations
        public System.Data.Entity.DbSet<Traveller> Travellers { get; set; } // Travellers
        public System.Data.Entity.DbSet<User> Users { get; set; } // Users

        static SampleTravellersContext()
        {
            System.Data.Entity.Database.SetInitializer<SampleTravellersContext>(null);
           
        }

        public SampleTravellersContext()
            : base("Name=SampleTravellers")
        {
            InitializePartial();
            this.Configuration.LazyLoadingEnabled = true;
        }

        public SampleTravellersContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public SampleTravellersContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public SampleTravellersContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public SampleTravellersContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

            public override int SaveChanges()
            {
                foreach (var entry in ChangeTracker.Entries()
                          .Where(p => p.State == EntityState.Deleted))
                    SoftDelete(entry);

                return base.SaveChanges();
            }

        private static Dictionary<Type, EntitySetBase> _mappingCache =
        new Dictionary<Type, EntitySetBase>();

        private string GetTableName(Type type)
        {
            EntitySetBase es = GetEntitySet(type);

            return string.Format("[{0}].[{1}]",
                es.MetadataProperties["Schema"].Value,
                es.MetadataProperties["Table"].Value);
        }

        private string GetPrimaryKeyName(Type type)
        {
            EntitySetBase es = GetEntitySet(type);

            return es.ElementType.KeyMembers[0].Name;
        }

        private EntitySetBase GetEntitySet(Type type)
        {
            if (!_mappingCache.ContainsKey(type))
            {
                ObjectContext octx = ((IObjectContextAdapter)this).ObjectContext;

                string typeName = ObjectContext.GetObjectType(type).Name;

                var es = octx.MetadataWorkspace
                                .GetItemCollection(DataSpace.SSpace)
                                .GetItems<EntityContainer>()
                                .SelectMany(c => c.BaseEntitySets
                                                .Where(e => e.Name == typeName))
                                .FirstOrDefault();

                if (es == null)
                    throw new ArgumentException("Entity type not found in GetTableName", typeName);

                _mappingCache.Add(type, es);
            }

            return _mappingCache[type];
        }

        private void SoftDelete(DbEntityEntry entry)
        {
            Type entryEntityType = entry.Entity.GetType();

            if (entryEntityType == typeof(Traveller) || entryEntityType == typeof(Traveller))
            {

            

            string tableName = GetTableName(entryEntityType);
            string primaryKeyName = GetPrimaryKeyName(entryEntityType);

            string sql =
                string.Format(
                    "UPDATE {0} SET STATUS = 1 WHERE {1} = @id",
                        tableName, primaryKeyName);

            Database.ExecuteSqlCommand(
                sql,
                new SqlParameter("@id", entry.OriginalValues[primaryKeyName]));

            // prevent hard delete            
            entry.State = EntityState.Detached;
            }
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new QuestionConfiguration());
            modelBuilder.Configurations.Add(new ResponseConfiguration());
            modelBuilder.Configurations.Add(new ResponseRepositoryConfiguration());
            modelBuilder.Configurations.Add(new TeamAffiliationConfiguration());
            modelBuilder.Configurations.Add(new TravellerConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());

           

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new QuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new ResponseConfiguration(schema));
            modelBuilder.Configurations.Add(new ResponseRepositoryConfiguration(schema));
            modelBuilder.Configurations.Add(new TeamAffiliationConfiguration(schema));
            modelBuilder.Configurations.Add(new TravellerConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class FakeSampleTravellersContext : ISampleTravellersContext
    {
        public System.Data.Entity.DbSet<Question> Questions { get; set; }
        public System.Data.Entity.DbSet<Response> Responses { get; set; }
        public System.Data.Entity.DbSet<ResponseRepository> ResponseRepositories { get; set; }
        public System.Data.Entity.DbSet<TeamAffiliation> TeamAffiliations { get; set; }
        public System.Data.Entity.DbSet<Traveller> Travellers { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }

        public FakeSampleTravellersContext()
        {
            Questions = new FakeDbSet<Question>("Id");
            Responses = new FakeDbSet<Response>("Id");
            ResponseRepositories = new FakeDbSet<ResponseRepository>("Id");
            TeamAffiliations = new FakeDbSet<TeamAffiliation>("Id");
            Travellers = new FakeDbSet<Traveller>("Id");
            Users = new FakeDbSet<User>("Id");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Questions
    [Table("Questions", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class Question
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Name", Order = 2, TypeName = "nvarchar(max)")]
        [Required]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name

        [Column(@"Team", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Team")]
        public int Team { get; set; } // Team

        [Column(@"RequiresResponse", Order = 4, TypeName = "bit")]
        [Required]
        [Display(Name = "Requires response")]
        public bool RequiresResponse { get; set; } // RequiresResponse

        [Column(@"Request", Order = 5, TypeName = "nvarchar(max)")]
        [Required]
        [Display(Name = "Request")]
        public string Request { get; set; } // Request

        [Column(@"Type", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Type")]
        public int Type { get; set; } // Type

        [Column(@"HelpText", Order = 7, TypeName = "nvarchar(max)")]
        [Required]
        [Display(Name = "Help text")]
        public string HelpText { get; set; } // HelpText

        [Column(@"HelpImage", Order = 8, TypeName = "nvarchar(max)")]
        [Display(Name = "Help image")]
        public string HelpImage { get; set; } // HelpImage

        [Column(@"Template", Order = 9, TypeName = "bit")]
        [Required]
        [Display(Name = "Template")]
        public bool Template { get; set; } // Template

        [Column(@"Status", Order = 10, TypeName = "bit")]
        [Display(Name="Status")]
        public bool Status { get; set; } // Status
        
        // Reverse navigation

        /// <summary>
        /// Child Questions (Many-to-Many) mapped by table [Corequisistes]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Question> Corequisites { get; set; } // Many to many mapping
        /// <summary>
        /// Child Questions (Many-to-Many) mapped by table [Postrequisistes]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Question> Postrequisites { get; set; } // Many to many mapping
        /// <summary>
        /// Child Questions (Many-to-Many) mapped by table [Prerequisistes]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Question> Prerequisites { get; set; } // Many to many mapping
        /// <summary>
        /// Child Questions (Many-to-Many) mapped by table [Corequisistes]
        /// </summary>

        /// <summary>
        /// Child ResponseRepositories where [ResponseRepository].[QuestionId] point to this entity (FK_dbo.ResponseRepository_dbo.Questions_QuestionId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ResponseRepository> ResponseRepositories { get; set; } // ResponseRepository.FK_dbo.ResponseRepository_dbo.Questions_QuestionId
        /// <summary>
        /// Child Travellers (Many-to-Many) mapped by table [TravellerActionList]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Traveller> Travellers { get; set; } // Many to many mapping

        public Question()
        {
            ResponseRepositories = new System.Collections.Generic.List<ResponseRepository>();
            Corequisites = new System.Collections.Generic.List<Question>();
            Postrequisites = new System.Collections.Generic.List<Question>();
            Prerequisites = new System.Collections.Generic.List<Question>();
            Travellers = new System.Collections.Generic.List<Traveller>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Responses
    [Table("Responses", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class Response
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"String", Order = 2, TypeName = "nvarchar(max)")]
        [Display(Name = "String")]
        public string String { get; set; } // String

        [Column(@"Integer", Order = 3, TypeName = "int")]
        [Display(Name = "Integer")]
        public int? Integer { get; set; } // Integer

        [Column(@"Double", Order = 4, TypeName = "float")]
        [Display(Name = "Double")]
        public double? Double { get; set; } // Double

        [Column(@"File", Order = 5, TypeName = "varbinary(max)")]
        [Display(Name = "File")]
        public byte[] File { get; set; } // File

        [Column(@"Boolean", Order = 6, TypeName = "bit")]
        [Display(Name = "Boolean")]
        public bool? Boolean { get; set; } // Boolean

        [Column(@"EndDate", Order = 7, TypeName = "datetime")]
        [Required]
        [Display(Name = "End date")]
        public System.DateTime EndDate { get; set; } // EndDate

        [Column(@"User_Id", Order = 8, TypeName = "int")]
        [Index(@"IX_FK_ResponseUser", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "User ID")]
        public int? UserId { get; set; } // User_Id

        [Column(@"Completed", Order = 9, TypeName = "bit")]
        [Required]
        [Display(Name = "Completed")]
        public bool Completed { get; set; } // Completed

        [Column(@"Successful", Order = 10, TypeName = "bit")]
        [Required]
        [Display(Name = "Successful")]
        public bool Successful { get; set; } // Successful

        [Column(@"ResponseRepositoryId", Order = 11, TypeName = "int")]
        [Index(@"IX_FK_ResponseRepositoryResponse", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Response repository ID")]
        public int ResponseRepositoryId { get; set; } // ResponseRepositoryId

        [Column(@"Query", Order = 12, TypeName = "nvarchar(max)")]
        [Display(Name = "Query")]
        public string Query { get; set; } // Query

        // Foreign keys

        /// <summary>
        /// Parent ResponseRepository pointed by [Responses].([ResponseRepositoryId]) (FK_dbo.Responses_dbo.ResponseRepository_ResponseRepositoryId)
        /// </summary>
        [ForeignKey("ResponseRepositoryId")] public virtual ResponseRepository ResponseRepository { get; set; } // FK_dbo.Responses_dbo.ResponseRepository_ResponseRepositoryId
        /// <summary>
        /// Parent User pointed by [Responses].([UserId]) (FK_dbo.Responses_dbo.Users_User_Id)
        /// </summary>
        [ForeignKey("UserId")] public virtual User User { get; set; } // FK_dbo.Responses_dbo.Users_User_Id

        public Response()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ResponseRepository
    [Table("ResponseRepository", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class ResponseRepository
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"MilestoneId", Order = 2, TypeName = "int")]
        [Index(@"IX_FK_MilestoneResponseRepository", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Milestone ID")]
        public int MilestoneId { get; set; } // MilestoneId

        [Column(@"QuestionId", Order = 3, TypeName = "int")]
        [Index(@"IX_FK_QuestionResponseRepository", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Question ID")]
        public int QuestionId { get; set; } // QuestionId

        // Reverse navigation

        /// <summary>
        /// Child Responses where [Responses].[ResponseRepositoryId] point to this entity (FK_dbo.Responses_dbo.ResponseRepository_ResponseRepositoryId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Response> Responses { get; set; } // Responses.FK_dbo.Responses_dbo.ResponseRepository_ResponseRepositoryId

        // Foreign keys

        /// <summary>
        /// Parent Traveller pointed by [ResponseRepository].([MilestoneId]) (FK_dbo.ResponseRepository_dbo.Travellers_MilestoneId)
        /// </summary>
        [ForeignKey("MilestoneId")] public virtual Traveller Traveller { get; set; } // FK_dbo.ResponseRepository_dbo.Travellers_MilestoneId
        /// <summary>
        /// Parent Question pointed by [ResponseRepository].([QuestionId]) (FK_dbo.ResponseRepository_dbo.Questions_QuestionId)
        /// </summary>
        [ForeignKey("QuestionId")] public virtual Question Question { get; set; } // FK_dbo.ResponseRepository_dbo.Questions_QuestionId

        public ResponseRepository()
        {
            Responses = new System.Collections.Generic.List<Response>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // TeamAffiliations
    [Table("TeamAffiliations", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class TeamAffiliation
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Team", Order = 2, TypeName = "int")]
        [Required]
        [Display(Name = "Team")]
        public int Team { get; set; } // Team

        // Reverse navigation

        /// <summary>
        /// Child Users (Many-to-Many) mapped by table [UserTeamAffiliation]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<User> Users { get; set; } // Many to many mapping

        public TeamAffiliation()
        {
            Users = new System.Collections.Generic.List<User>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Travellers
    [Table("Travellers", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class Traveller
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"Product", Order = 2, TypeName = "nvarchar(max)")]
        [Required]
        [Display(Name = "Product")]
        public string Product { get; set; } // Product

        [Column(@"StartDate", Order = 3, TypeName = "datetime")]
        [Required]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate

        [Column(@"Owner_Id", Order = 4, TypeName = "int")]
        [Index(@"IX_FK_Owner", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Owner ID")]
        public int OwnerId { get; set; } // Owner_Id

        [Column(@"Completed", Order = 5, TypeName = "bit")]
        [Required]
        [Display(Name = "Completed")]
        public bool Completed { get; set; } // Completed

        [Column(@"Successful", Order = 6, TypeName = "bit")]
        [Required]
        [Display(Name = "Successful")]
        public bool Successful { get; set; } // Successful

        [Column(@"Description", Order = 7, TypeName = "nvarchar(max)")]
        [Required]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description

        [Column(@"Name", Order = 8, TypeName = "nvarchar(max)")]
        [Required]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name

        [Column(@"Status", Order = 10, TypeName = "bit")]
        [Display(Name = "Status")]
        public bool Status { get; set; } // Status

        // Reverse navigation

        /// <summary>
        /// Child Questions (Many-to-Many) mapped by table [TravellerActionList]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Question> Questions { get; set; } // Many to many mapping
        /// <summary>
        /// Child ResponseRepositories where [ResponseRepository].[MilestoneId] point to this entity (FK_dbo.ResponseRepository_dbo.Travellers_MilestoneId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ResponseRepository> ResponseRepositories { get; set; } // ResponseRepository.FK_dbo.ResponseRepository_dbo.Travellers_MilestoneId

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [Travellers].([OwnerId]) (FK_dbo.Travellers_dbo.Users_Owner_Id)
        /// </summary>
        [ForeignKey("OwnerId")] public virtual User User { get; set; } // FK_dbo.Travellers_dbo.Users_Owner_Id

        public Traveller()
        {
            ResponseRepositories = new System.Collections.Generic.List<ResponseRepository>();
            Questions = new System.Collections.Generic.List<Question>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Users
    [Table("Users", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class User
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"First", Order = 2, TypeName = "nvarchar(max)")]
        [Required]
        [Display(Name = "First")]
        public string First { get; set; } // First

        [Column(@"Last", Order = 3, TypeName = "nvarchar(max)")]
        [Required]
        [Display(Name = "Last")]
        public string Last { get; set; } // Last

        [Column(@"Email", Order = 4, TypeName = "nvarchar(max)")]
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } // Email

        [Column(@"WindowsName", Order = 5, TypeName = "nvarchar(max)")]
        [Required]
        [Display(Name = "Windows name")]
        public string WindowsName { get; set; } // WindowsName

        // Reverse navigation

        /// <summary>
        /// Child Responses where [Responses].[User_Id] point to this entity (FK_dbo.Responses_dbo.Users_User_Id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Response> Responses { get; set; } // Responses.FK_dbo.Responses_dbo.Users_User_Id
        /// <summary>
        /// Child TeamAffiliations (Many-to-Many) mapped by table [UserTeamAffiliation]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TeamAffiliation> TeamAffiliations { get; set; } // Many to many mapping
        /// <summary>
        /// Child Travellers where [Travellers].[Owner_Id] point to this entity (FK_dbo.Travellers_dbo.Users_Owner_Id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Traveller> Travellers { get; set; } // Travellers.FK_dbo.Travellers_dbo.Users_Owner_Id

        public User()
        {
            Responses = new System.Collections.Generic.List<Response>();
            Travellers = new System.Collections.Generic.List<Traveller>();
            TeamAffiliations = new System.Collections.Generic.List<TeamAffiliation>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // Questions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class QuestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Question>
    {
        public QuestionConfiguration()
            : this("dbo")
        {
        }

        public QuestionConfiguration(string schema)
        {
            this.Map(x => x.Requires("Status").HasValue(false)).Ignore(x => x.Status);
            Property(x => x.HelpImage).IsOptional();
            HasMany(t => t.Corequisites).WithMany().Map(m =>
            {
                m.ToTable("Corequisistes", "dbo");
                m.MapLeftKey("CorequisiteID");
                m.MapRightKey("QuestionID");
            });
            HasMany(t => t.Postrequisites).WithMany().Map(m =>
            {
                m.ToTable("Postrequisistes", "dbo");
                m.MapLeftKey("PostrequisiteID");
                m.MapRightKey("QuestionID");
            });
            HasMany(t => t.Prerequisites).WithMany().Map(m =>
            {
                m.ToTable("Prerequisistes", "dbo");
                m.MapLeftKey("PrerequisiteID");
                m.MapRightKey("QuestionID");
            });
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Responses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class ResponseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Response>
    {
        public ResponseConfiguration()
            : this("dbo")
        {
        }

        public ResponseConfiguration(string schema)
        {
            Property(x => x.String).IsOptional();
            Property(x => x.Integer).IsOptional();
            Property(x => x.Double).IsOptional();
            Property(x => x.File).IsOptional();
            Property(x => x.Boolean).IsOptional();
            Property(x => x.UserId).IsOptional();
            Property(x => x.Query).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ResponseRepository
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class ResponseRepositoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResponseRepository>
    {
        public ResponseRepositoryConfiguration()
            : this("dbo")
        {
        }

        public ResponseRepositoryConfiguration(string schema)
        {

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // TeamAffiliations
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class TeamAffiliationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TeamAffiliation>
    {
        public TeamAffiliationConfiguration()
            : this("dbo")
        {
        }

        public TeamAffiliationConfiguration(string schema)
        {
            HasMany(t => t.Users).WithMany(t => t.TeamAffiliations).Map(m =>
            {
                m.ToTable("UserTeamAffiliation", "dbo");
                m.MapLeftKey("TeamAffiliations_Id");
                m.MapRightKey("Users_Id");
            });
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Travellers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class TravellerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Traveller>
    {
        public TravellerConfiguration()
            : this("dbo")
        {
        }

        public TravellerConfiguration(string schema)
        {
            this.Map(x => x.Requires("Status").HasValue(false)).Ignore(x=>x.Status);
            HasMany(t => t.Questions).WithMany(t => t.Travellers).Map(m =>
            {
                m.ToTable("TravellerActionList", "dbo");
                m.MapLeftKey("Milestones_Id");
                m.MapRightKey("Questions_Id");
            });
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

}
// </auto-generated>

